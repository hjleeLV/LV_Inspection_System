using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO.Ports;
using System.IO;
using System.Runtime.InteropServices;   //호환되지 않은 Dll을 사용할때
using OfficeOpenXml;
using System.Diagnostics;
using System.Threading;
using System.Text.RegularExpressions;
using System.Collections;

namespace IPSST_Inspection_System.GUI.Control
{
    public partial class Ctr_PLC : UserControl
    {
        enum PROTOCAL { XGT, ModbbusTCP, ModbusRTU, IPSBoard};
        delegate void MyDelegate();      //델리게이트 선언(크로스 쓰레드 해결하기 위한 용도)
        public bool m_Trigger_Check = false;
        public int m_Cam_Trigger_Num = 0;

        bool SendForamt = true;          // true : ASCII   false : HEX
        bool ReceiveFormat = true;       // true : ASCII   false : HEX
        bool m_check_sending = false;

        public bool m_D_Write_check = false;

        Thread[] threads = new Thread[2];
        public bool m_threads_Check = false;

        public static char sSTX() { return Convert.ToChar(0x02); }
        public static char sETX() { return Convert.ToChar(0x03); }
        public static char sEOT() { return Convert.ToChar(0x04); }
        public static char sENQ() { return Convert.ToChar(0x05); }
        public static char sACK() { return Convert.ToChar(0x06); }
        public static char sNAK() { return Convert.ToChar(0x15); }
        public static char sCR() { return Convert.ToChar(13); }
        public static char sLF() { return Convert.ToChar(10); }
        public static string sCRLF() { return "\r\n"; }
        //int port;

        public string m_SlaveID;
        public int m_Pingpong_Num = 0;
        int m_Protocal;
        //private Stopwatch send_sw = new Stopwatch();

        private EasyModbus.ModbusClient modbusClient;
        //string receiveData = null;
        //string sendData = null;
        //delegate void UpdateReceiveDataCallback();

        public List<string>[] send_Message = new List<string>[4];
        //public Queue[] send_Message = new Queue[4];

        public int m_DELAYCAMMISS = 50;
        public float m_RESETDURATION = 2.0f;


        public Ctr_PLC()
        {
            InitializeComponent();
            modbusClient = new EasyModbus.ModbusClient();
        }

        protected int m_Language = 0; // 언어 선택 0: 한국어 1:영어

        public int m_SetLanguage
        {
            get { return m_Language; }
            set
            {
                if (value == 0 && m_Language != value)
                {// 한국어
                    groupBox2.Text = "통신 설정";
                    label4.Text = "포트 이름";
                    label5.Text = "보드속도";
                    label6.Text = "데이터 비트";
                    label7.Text = "스탑 비트";
                    label8.Text = "페러티";
                    label2.Text = "수신 포맷";
                    label3.Text = "송신 포맷";
                    btnOpen.Text = "연결";
                    btnClose.Text = "접속 해제";
                    label9.Text = "주소";
                    label12.Text = "데이터 크기";
                    label11.Text = "데이터 값";
                    button_D_READ.Text = "읽기";
                    button_D_WRITE.Text = "쓰기";
                    label13.Text = "주소";
                    label14.Text = "데이터 값";
                    button_L_READ.Text = "읽기";
                    button_L_WRITE.Text = "쓰기";
                    groupBox3.Text = "프로토콜 설정";
                    label16.Text = "프로토콜";
                    label15.Text = "국번";
                    label17.Text = "전송간격(ms)";
                    checkBox_PINGPONG.Text = "교차 전송";
                    checkBox_AllOnceTx.Text = "모아서 통합 판정";
                    label35.Text = "판정 임계 시간(ms)";
                    button_LOAD.Text = "불러오기";
                    button_SAVE.Text = "적용 및 저장";
                    label36.Text = "대상 없음 판정";
                    checkBox_JView.Text = "판정 신호 보기";
                    label37.Text = "서버 IP";
                    label38.Text = "서버 PORT";
                    checkBox_SIMULATION.Text = "시물레이션 모드";
                    checkBox_Tab_Enable.Text = "검사중 메뉴 사용안함";
                    btnSend.Text = "송신";
                    button_View.Text = "뷰";
                    btnClear.Text = "클리어";
                    button_Send_Save.Text = "적용 및 저장";
                }
                else if (value == 1 && m_Language != value)
                {// 영어
                    groupBox2.Text = "Communication";
                    label4.Text = "Port Name";
                    label5.Text = "Baudrate";
                    label6.Text = "Data Bit";
                    label7.Text = "Stop Bit";
                    label8.Text = "Parity";
                    label2.Text = "Rx Format";
                    label3.Text = "Tx Format";
                    btnOpen.Text = "Connect";
                    btnClose.Text = "Disconnect";
                    label9.Text = "Device";
                    label12.Text = "Data Size";
                    label11.Text = "Data Value";
                    button_D_READ.Text = "Read";
                    button_D_WRITE.Text = "Write";
                    label13.Text = "Device";
                    label14.Text = "Data Value";
                    button_L_READ.Text = "Read";
                    button_L_WRITE.Text = "Write";
                    groupBox3.Text = "Protocol";
                    label16.Text = "Method";
                    label15.Text = "Station No.";
                    label17.Text = "Tx Interval(ms)";
                    checkBox_PINGPONG.Text = "Tx in turns";
                    checkBox_AllOnceTx.Text = "Once Tx after inspection";
                    label35.Text = "Judgement time(ms)";
                    button_LOAD.Text = "Load";
                    button_SAVE.Text = "Apply and Save";
                    label36.Text = "No object Tx";
                    checkBox_JView.Text = "Judge signal view";
                    label37.Text = "Server IP";
                    label38.Text = "Server PORT";
                    checkBox_SIMULATION.Text = "Simulation Mode";
                    checkBox_Tab_Enable.Text = "Disable Menu when start";
                    btnSend.Text = "Send";
                    button_View.Text = "View";
                    btnClear.Text = "Clear";
                    button_Send_Save.Text = "Apply & Save";
                }
                m_Language = value;
            }
        }

        private void Ctr_PLC_ControlRemoved(object sender, ControlEventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                if (serialPort1.IsOpen)
                {
                    serialPort1.DataReceived -= new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                    serialPort1.Close();
                }
            }
        }


        string str = string.Empty;

        void serialPort1_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                if (m_Protocal == (int)PROTOCAL.IPSBoard)
                {
                    return;
                }
                if (IPSSTApp.Instance().m_Config.m_Cam_Kind[0] == 3 ||
                    IPSSTApp.Instance().m_Config.m_Cam_Kind[1] == 3 ||
                    IPSSTApp.Instance().m_Config.m_Cam_Kind[2] == 3 ||
                    IPSSTApp.Instance().m_Config.m_Cam_Kind[3] == 3 || t_PLC_D_READ_check || t_PLC_L_READ_check)
                {
                    return;
                }
                byte[] array = new byte[512];
                int temp;
                temp = serialPort1.Read(array, 0, 512);

                //아스키 값으로 받기
                if (ReceiveFormat)
                {
                    MyDelegate dt = delegate()
                    {
                        txt1.Text = "Receive Data : ";
                        for (int i = 0; i < temp; i++)
                        {
                            txt1.Text += (char)array[i];
                        }
                    };
                    this.Invoke(dt);

                }
                //HEX 값으로 받기
                else
                {
                    str = "";
                    for (int i = 0; i < temp; i++)
                    {
                        str += string.Format("{0:x2} ", array[i]);
                    }

                    //헥사로 바꿔서 출력
                    MyDelegate dt = delegate()
                    {
                        txt1.Text = "Receive Data : ";
                        txt1.Text += str;
                    };

                    this.Invoke(dt);
                }


                //bool m_Next = false;
                //string strInData = string.Empty;
                //do
                //{
                //    str = strInData;
                //    string msg = serialPort1.ReadExisting();
                //    strInData += msg;

                //    if (msg.Length == 0)
                //    {
                //        m_Next = true;
                //    }
                //    Thread.Sleep(1);
                //} while (!m_Next);

                ////아스키 형태로 보내라
                //if (SendForamt)
                //{
                //    MyDelegate dt = delegate()
                //    {
                //        txt1.Text = "Receive Data : " + str;
                //    };
                //    this.Invoke(dt);
                //}
                ////HEX 형태로 보내라
                //else
                //{
                //    string str1 = string.Empty;
                //    byte[] arr = Encoding.ASCII.GetBytes((str).ToCharArray());
                //    foreach (byte b in arr)
                //    {
                //        str1 += string.Format("{0:x2}", b);
                //    }
                //    MyDelegate dt = delegate()
                //    {
                //        txt1.Text = "Receive Data : " + str1;
                //    };
                //    this.Invoke(dt);
                //}

            }
            catch
            {
            }
        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            try
            {
                if (serialPort1.IsOpen)
                {
                    if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
                    {
                        //아스키 형태로 보내라
                        if (SendForamt)
                        {
                            serialPort1.Write(txt2.Text);
                        }
                        //HEX 형태로 보내라
                        else
                        {
                            string str = string.Empty;
                            byte[] arr = Encoding.ASCII.GetBytes((txt2.Text).ToCharArray());
                            foreach (byte b in arr)
                            {
                                str += string.Format("{0:x2}", b);
                            }
                            serialPort1.Write(str);
                        }

                        Thread.Sleep(10);
                        bool m_Next = false;
                        string strInData = string.Empty;
                        do
                        {
                            str = strInData;
                            string msg = serialPort1.ReadExisting();
                            strInData += msg;

                            if (msg.Length == 0)
                            {
                                m_Next = true;
                            }
                            Thread.Sleep(1);
                        } while (!m_Next);

                        //아스키 형태로 보내라
                        if (SendForamt)
                        {
                            MyDelegate dt = delegate()
                            {
                                txt1.Text = "Receive Data : " + str;
                            };
                            this.Invoke(dt);
                        }
                        //HEX 형태로 보내라
                        else
                        {
                            string str1 = string.Empty;
                            byte[] arr = Encoding.ASCII.GetBytes((str).ToCharArray());
                            foreach (byte b in arr)
                            {
                                str1 += string.Format("{0:x2}", b);
                            }
                            MyDelegate dt = delegate()
                            {
                                txt1.Text = "Receive Data : " + str1;
                            };
                            this.Invoke(dt);
                        }

                    }
                }
                else
                {
                    if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                    {//한국어
                        IPSSTApp.Instance().m_mainform.add_Log("포트가 연결되지 않았습니다.");
                    }
                    else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                    {//영어
                        IPSSTApp.Instance().m_mainform.add_Log("Use after connection of PLC.");
                    }
                }
            }
            catch
            { }
        }

        private void cb1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                serialPort1.PortName = cbPortName.Text;
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                modbusClient.SerialPort = cbPortName.Text;
            }
        }

        public void btnOpen_Click(object sender, EventArgs e)
        {
            try
            {
                if (m_Protocal == (int)PROTOCAL.XGT)
                {
                    button_LOAD_Click(sender, e);
                    cb1_SelectedIndexChanged(sender, e);
                    cbBaudrate_SelectedIndexChanged(sender, e);
                    cbDataBits_SelectedIndexChanged(sender, e);
                    cbStopBits_SelectedIndexChanged(sender, e);
                    cbParity_SelectedIndexChanged(sender, e);
                    cbReceiveFormat_SelectedIndexChanged(sender, e);
                    cbSendFormat_SelectedIndexChanged(sender, e);
                    comboBox_Protocal_SelectedIndexChanged(sender, e);
                    comboBox_SlaveID_SelectedIndexChanged(sender, e);

                    serialPort1.Open();
                    serialPort1.DataReceived += new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                    btnClose.Enabled = true;
                    btnOpen.Enabled = false;
                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                {
                    if (modbusClient.Connected)
                    {
                        modbusClient.Disconnect();
                    }
                    button_LOAD_Click(sender, e);
                    modbusClient.IPAddress = textBox_SERVER_IP.Text;
                    modbusClient.Port = int.Parse(textBox_SERVER_PORT.Text);
                    modbusClient.SerialPort = null;
                    //modbusClient.receiveDataChanged += new EasyModbus.ModbusClient.ReceiveDataChanged(UpdateReceiveData);
                    //modbusClient.sendDataChanged += new EasyModbus.ModbusClient.SendDataChanged(UpdateSendData);
                    //modbusClient.connectedChanged += new EasyModbus.ModbusClient.ConnectedChanged(UpdateConnectedChanged);

                    modbusClient.Connect();
                    btnClose.Enabled = true;
                    btnOpen.Enabled = false;
                }
                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    if (modbusClient.Connected)
                    {
                        modbusClient.Disconnect();
                    }
                    button_LOAD_Click(sender, e);
                    cb1_SelectedIndexChanged(sender, e);
                    cbBaudrate_SelectedIndexChanged(sender, e);
                    cbDataBits_SelectedIndexChanged(sender, e);
                    cbStopBits_SelectedIndexChanged(sender, e);
                    cbParity_SelectedIndexChanged(sender, e);
                    cbReceiveFormat_SelectedIndexChanged(sender, e);
                    cbSendFormat_SelectedIndexChanged(sender, e);
                    comboBox_Protocal_SelectedIndexChanged(sender, e);
                    comboBox_SlaveID_SelectedIndexChanged(sender, e);

                    modbusClient.Connect();
                    btnClose.Enabled = true;
                    btnOpen.Enabled = false;
                }
                else if (m_Protocal == (int)PROTOCAL.IPSBoard)
                {
                    button_LOAD_Click(sender, e);
                    cb1_SelectedIndexChanged(sender, e);
                    cbBaudrate_SelectedIndexChanged(sender, e);
                    cbDataBits_SelectedIndexChanged(sender, e);
                    cbStopBits_SelectedIndexChanged(sender, e);
                    cbParity_SelectedIndexChanged(sender, e);
                    cbReceiveFormat_SelectedIndexChanged(sender, e);
                    cbSendFormat_SelectedIndexChanged(sender, e);
                    comboBox_Protocal_SelectedIndexChanged(sender, e);
                    comboBox_SlaveID_SelectedIndexChanged(sender, e);

                    serialPort1.Open();
                    serialPort1.DataReceived += new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                    btnClose.Enabled = true;
                    btnOpen.Enabled = false;
                }

                if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                {
                    IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "실패";
                }
                else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                {
                    IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Fail";
                }

                if (m_Protocal == (int)PROTOCAL.XGT)
                {
                    PLC_L_WRITE("LX1" + m_Pingpong_Num.ToString("0") + "13", 1); // PLC와 연결확인
                    Thread.Sleep(100);
                    PLC_L_WRITE("LX1" + m_Pingpong_Num.ToString("0") + "13", 1); // PLC와 연결확인
                    Thread.Sleep(100);

                    // MessageBox.Show(PLC_L_READ("LX1013").ToString());
                    if (PLC_L_READ("LX1" + m_Pingpong_Num.ToString("0") + "13") == 1)
                    {
                        if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "정상 연결";
                        }
                        else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Conn.";
                        }
                        IPSSTApp.Instance().m_mainform.timer_Refresh_Amount.Start();
                        if (!m_threads_Check)
                        {
                            PLC_Thread_Start();
                        }
                    }
                    else
                    {
                        Thread.Sleep(100);
                        if (PLC_L_READ("LX1" + m_Pingpong_Num.ToString("0") + "13") == 1)
                        {
                            if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                            {
                                IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "정상 연결";
                            }
                            else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                            {
                                IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Conn.";
                            }
                            IPSSTApp.Instance().m_mainform.timer_Refresh_Amount.Start();
                            if (!m_threads_Check)
                            {
                                PLC_Thread_Start();
                            }
                        }
                        else
                        {
                            if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                            {
                                IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "에러";
                            }
                            else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                            {
                                IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Error";
                            }
                        }
                    }
                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP || m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    if (modbusClient.Connected)
                    {
                        if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "정상 연결";
                        }
                        else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Conn.";
                        }
                        IPSSTApp.Instance().m_mainform.timer_Refresh_Amount.Start();
                        if (!m_threads_Check)
                        {
                            PLC_Thread_Start();
                        }
                    }
                    else
                    {
                        if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "에러";
                        }
                        else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Error";
                        }
                    }
                }
                else if (m_Protocal == (int)PROTOCAL.IPSBoard)
                {
                    if (serialPort1.IsOpen)
                    {
                        if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "정상 연결";
                        }
                        else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Conn.";
                        }
                        IPSSTApp.Instance().m_mainform.timer_Refresh_Amount.Start();
                        if (!m_threads_Check)
                        {
                            PLC_Thread_Start();
                        }
                    }
                    else
                    {
                        if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "에러";
                        }
                        else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                        {
                            IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Error";
                        }
                    }
                }
                button_Send_Save_Click(sender, e);
                for (int i = 0; i < 4; i++)
                {
                    IPSSTApp.Instance().m_Config.Tx_Idx[i] = 0;
                }
                //timer_SEND.Start();
                //send_sw.Reset();
                //send_sw.Start();
            }

            catch
            {
                if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                {//한국어
                    IPSSTApp.Instance().m_mainform.add_Log("통신 포트를 열 수 없습니다.");
                    IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "에러";
                }
                else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                {//영어
                    IPSSTApp.Instance().m_mainform.add_Log("Can't open the port.");
                    IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Error";
                }
            }

        }

        public void poolingforconnection()
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                return;
            }

            if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            PLC_D_WRITE("DW5" + (m_Pingpong_Num + 1).ToString("0") + "04", 1, 40);
        }

        public void btnClose_Click(object sender, EventArgs e)
        {
            try
            {
                PLC_L_WRITE("LX1" + m_Pingpong_Num.ToString("0") + "13", 0);

                IPSSTApp.Instance().m_mainform.timer_Refresh_Amount.Stop();
                if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
                {
                    serialPort1.DataReceived -= new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                    serialPort1.Close();
                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                {
                    if (modbusClient.Connected)
                    {
                        modbusClient.Disconnect();
                    }
                }
                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    if (modbusClient.Connected)
                    {
                        modbusClient.Disconnect();
                    }
                }
                btnClose.Enabled = false;
                btnOpen.Enabled = true;
                if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                {
                    IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["값"] = "끊김";
                }
                else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                {
                    IPSSTApp.Instance().m_Config.ds_STATUS.Tables["AUTO STATUS"].Rows[2]["Value"] = "Disconn.";
                }

                //timer_SEND.Stop();
                if (m_threads_Check)
                {
                    PLC_Thread_Stop();
                }
            }
            catch
            { }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            txt1.Text = "";
        }

        private void cbReceiveFormat_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbReceiveFormat.Text == "ASCII")
            {
                ReceiveFormat = true;
            }
            else
            {
                ReceiveFormat = false;
            }

        }

        private void cbSendFormat_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbSendFormat.Text == "ASCII")
            {
                SendForamt = true;
            }
            else
            {
                SendForamt = false;
            }
        }

        private void cbBaudrate_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT)
            {
                serialPort1.BaudRate = int.Parse(cbBaudrate.Text);
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                modbusClient.Baudrate = int.Parse(cbBaudrate.Text);
            }
        }

        private void cbDataBits_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT)
            {
                serialPort1.DataBits = int.Parse(cbDataBits.Text);
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                //NONE
            }
        }

        private void cbStopBits_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                switch (cbStopBits.SelectedIndex)
                {
                    case 0:
                        serialPort1.StopBits = StopBits.One;
                        break;
                    case 1:
                        serialPort1.StopBits = StopBits.OnePointFive;
                        break;
                    case 2:
                        serialPort1.StopBits = StopBits.Two;
                        break;
                    default:
                        serialPort1.StopBits = StopBits.One;
                        break;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                switch (cbStopBits.SelectedIndex)
                {
                    case 0:
                        modbusClient.StopBits = StopBits.One;
                        break;
                    case 1:
                        modbusClient.StopBits = StopBits.OnePointFive;
                        break;
                    case 2:
                        modbusClient.StopBits = StopBits.Two;
                        break;
                    default:
                        modbusClient.StopBits = StopBits.One;
                        break;
                }
            }
        }

        private void cbParity_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                switch (cbParity.SelectedIndex)
                {
                    case 0:
                        serialPort1.Parity = Parity.None;
                        break;
                    case 1:
                        serialPort1.Parity = Parity.Odd;
                        break;
                    case 2:
                        serialPort1.Parity = Parity.Even;
                        break;
                    default:
                        serialPort1.Parity = Parity.None;
                        break;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                switch (cbParity.SelectedIndex)
                {
                    case 0:
                        modbusClient.Parity = Parity.None;
                        break;
                    case 1:
                        modbusClient.Parity = Parity.Odd;
                        break;
                    case 2:
                        modbusClient.Parity = Parity.Even;
                        break;
                    default:
                        modbusClient.Parity = Parity.None;
                        break;
                }
            }
        }

        public void Form_RS232_Load(object sender, EventArgs e)
        {

        }

        public void button_LOAD_Click(object sender, EventArgs e)
        {
            //IPSSTApp.Instance().m_Config.m_Model_Name = IPSSTApp.Instance().m_mainform.textBox_MODEL_NAME.Text;
            if (IPSSTApp.Instance().m_Config.m_Model_Name == "")
            {
                if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                {//한국어
                    IPSSTApp.Instance().m_mainform.add_Log("모델을 등록후 사용하세요.");
                }
                else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                {//영어
                    IPSSTApp.Instance().m_mainform.add_Log("Use after registering a model.");
                }
                return;
            }

            try
            {
                FileInfo newFile = new FileInfo(IPSSTApp.Instance().excute_path + "\\Models\\" + IPSSTApp.Instance().m_Config.m_Model_Name + "\\" + IPSSTApp.Instance().m_Config.m_Model_Name + ".xlsx");
                if (!newFile.Exists)
                {
                    return;
                }
                using (ExcelPackage package = new ExcelPackage(newFile))
                {
                    // Add a worksheet to the empty workbook
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[3];

                    cbPortName.SelectedIndex = cbPortName.FindStringExact(worksheet.Cells[2, 2].Value.ToString());
                    cbBaudrate.SelectedIndex = cbBaudrate.FindStringExact(worksheet.Cells[3, 2].Value.ToString());
                    cbDataBits.SelectedIndex = cbDataBits.FindStringExact(worksheet.Cells[4, 2].Value.ToString());
                    cbStopBits.SelectedIndex = cbStopBits.FindStringExact(worksheet.Cells[5, 2].Value.ToString());
                    cbParity.SelectedIndex = cbParity.FindStringExact(worksheet.Cells[6, 2].Value.ToString());
                    cbReceiveFormat.SelectedIndex = cbReceiveFormat.FindStringExact(worksheet.Cells[7, 2].Value.ToString());
                    cbSendFormat.SelectedIndex = cbSendFormat.FindStringExact(worksheet.Cells[8, 2].Value.ToString());
                    if (worksheet.Cells[9, 2].Value != null && worksheet.Cells[10, 2].Value != null)
                    {
                        comboBox_SlaveID.SelectedIndex = comboBox_SlaveID.FindStringExact(worksheet.Cells[9, 2].Value.ToString());
                        comboBox_Protocal.SelectedIndex = comboBox_Protocal.FindStringExact(worksheet.Cells[10, 2].Value.ToString());
                    }
                    else
                    {
                        comboBox_SlaveID.SelectedIndex = 0;// comboBox_SlaveID.FindStringExact(worksheet.Cells[9, 2].Value.ToString());
                        comboBox_Protocal.SelectedIndex = 0;//comboBox_Protocal.FindStringExact(worksheet.Cells[10, 2].Value.ToString());
                    }

                    if (worksheet.Cells[10, 3].Value != null)
                    {
                        textBox_TxInterval.Text = worksheet.Cells[10, 3].Value.ToString();
                    }
                    else
                    {
                        textBox_TxInterval.Text = "15";
                    }
                    int.TryParse(textBox_TxInterval.Text, out t_Tx_Interval);

                    if (worksheet.Cells[10, 4].Value != null)
                    {
                        IPSSTApp.Instance().m_Config.PLC_Pingpong_USE = worksheet.Cells[10, 4].Value.ToString() == "0" ? false : true;
                        checkBox_PINGPONG.Checked = IPSSTApp.Instance().m_Config.PLC_Pingpong_USE;
                    }
                    else
                    {
                        IPSSTApp.Instance().m_Config.PLC_Pingpong_USE = false;
                        checkBox_PINGPONG.Checked = false;
                    }

                    if (worksheet.Cells[10, 5].Value != null)
                    {
                        IPSSTApp.Instance().m_Config.PLC_Once_Tx_USE = worksheet.Cells[10, 5].Value.ToString() == "0" ? false : true;
                        checkBox_AllOnceTx.Checked = IPSSTApp.Instance().m_Config.PLC_Once_Tx_USE;
                    }
                    else
                    {
                        IPSSTApp.Instance().m_Config.PLC_Once_Tx_USE = false;
                        checkBox_AllOnceTx.Checked = false;
                    }

                    if (worksheet.Cells[10, 6].Value != null)
                    {
                        textBox_CheckDelay.Text = worksheet.Cells[10, 6].Value.ToString();
                    }
                    else
                    {
                        textBox_CheckDelay.Text = "100";
                    }
                    int.TryParse(textBox_CheckDelay.Text, out t_Once_Delay);

                    if (worksheet.Cells[10, 7].Value != null)
                    {
                        comboBox_NOOBJECT.SelectedIndex = int.Parse(worksheet.Cells[10, 7].Value.ToString());
                    }
                    else
                    {
                        comboBox_NOOBJECT.SelectedIndex = 0;
                    }
                    IPSSTApp.Instance().m_Config.m_Judge_Priority = comboBox_NOOBJECT.SelectedIndex;
                    //if (worksheet.Cells[11, 2].Value != null)
                    //{
                    //    IPSSTApp.Instance().m_Config.m_SetLanguage = 0;
                    //    IPSSTApp.Instance().m_mainform.ctr_Model1.comboBox_Language.SelectedIndex = 0;
                    //}
                    //else
                    //{
                    //    IPSSTApp.Instance().m_Config.m_SetLanguage = int.Parse(worksheet.Cells[10, 7].Value.ToString());
                    //    IPSSTApp.Instance().m_mainform.ctr_Model1.comboBox_Language.SelectedIndex = IPSSTApp.Instance().m_Config.m_SetLanguage;
                    //}

                    if (worksheet.Cells[13, 2].Value != null)
                    {
                        textBox_SERVER_IP.Text = worksheet.Cells[13, 2].Value.ToString();
                    }
                    else
                    {
                        textBox_SERVER_IP.Text = "192.168.0.10";
                    }

                    if (worksheet.Cells[13, 3].Value != null)
                    {
                        textBox_SERVER_PORT.Text = worksheet.Cells[13, 3].Value.ToString();
                    }
                    else
                    {
                        textBox_SERVER_PORT.Text = "502";
                    }

                    if (worksheet.Cells[13, 4].Value != null)
                    {
                        IPSSTApp.Instance().m_mainform.Simulation_mode = worksheet.Cells[13, 4].Value.ToString() == "0" ? false : true;
                        checkBox_SIMULATION.Checked = IPSSTApp.Instance().m_mainform.Simulation_mode;
                    }
                    else
                    {
                        IPSSTApp.Instance().m_mainform.Simulation_mode = false;
                        checkBox_SIMULATION.Checked = false;
                    }


                    if (worksheet.Cells[14, 2].Value != null)
                    {
                        textBox_Delay0.Text = worksheet.Cells[14, 2].Value.ToString();
                    }
                    else
                    {
                        textBox_Delay0.Text = "0";
                    }
                    int.TryParse(textBox_Delay0.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[0]);

                    if (worksheet.Cells[14, 3].Value != null)
                    {
                        textBox_Delay1.Text = worksheet.Cells[14, 3].Value.ToString();
                    }
                    else
                    {
                        textBox_Delay1.Text = "0";
                    }
                    int.TryParse(textBox_Delay1.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[1]);

                    if (worksheet.Cells[14, 4].Value != null)
                    {
                        textBox_Delay2.Text = worksheet.Cells[14, 4].Value.ToString();
                    }
                    else
                    {
                        textBox_Delay2.Text = "0";
                    }
                    int.TryParse(textBox_Delay2.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[2]);

                    if (worksheet.Cells[14, 5].Value != null)
                    {
                        textBox_Delay3.Text = worksheet.Cells[14, 5].Value.ToString();
                    }
                    else
                    {
                        textBox_Delay3.Text = "0";
                    }
                    int.TryParse(textBox_Delay3.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[3]);
                    button_Send_Save_Click(sender, e);



                    if (worksheet.Cells[14, 6].Value != null)
                    {
                        textBox_CAMREFCNT.Text = worksheet.Cells[14, 6].Value.ToString();
                    }
                    else
                    {
                        textBox_CAMREFCNT.Text = "10";
                    }
                    int t_v = 10;
                    int.TryParse(textBox_CAMREFCNT.Text, out t_v);
                    if (t_v >= 0)
                    {
                        IPSSTApp.Instance().m_Config.CAM_Refresh_CNT = t_v;
                    }
                    else
                    {
                        IPSSTApp.Instance().m_Config.CAM_Refresh_CNT = 10;
                    }

                    if (worksheet.Cells[14, 7].Value != null)
                    {
                        textBox_ROOMNUM.Text = worksheet.Cells[14, 7].Value.ToString();
                    }
                    else
                    {
                        textBox_ROOMNUM.Text = "2";
                    }
                    t_v = 2;
                    int.TryParse(textBox_ROOMNUM.Text, out t_v);
                    IPSSTApp.Instance().m_Config.Tx_Room_Num = t_v;

                    if (worksheet.Cells[14, 8].Value != null)
                    {
                        IPSSTApp.Instance().m_Config.Tx_Merge = worksheet.Cells[14, 8].Value.ToString() == "0" ? false : true;
                        checkBox_MERGETX.Checked = IPSSTApp.Instance().m_Config.Tx_Merge;
                    }
                    else
                    {
                        IPSSTApp.Instance().m_Config.Tx_Merge = false;
                        checkBox_MERGETX.Checked = false;
                    }
                    if (worksheet.Cells[14, 9].Value != null)
                    {
                        IPSSTApp.Instance().m_Config.Disable_Menu = worksheet.Cells[14, 9].Value.ToString() == "0" ? false : true;
                        checkBox_Tab_Enable.Checked = IPSSTApp.Instance().m_Config.Disable_Menu;
                    }
                    else
                    {
                        IPSSTApp.Instance().m_Config.Disable_Menu = false;
                        checkBox_Tab_Enable.Checked = false;
                    }


                    if (worksheet.Cells[15, 2].Value != null)
                    {
                        textBox_DELAYCAMMISS.Text = worksheet.Cells[15, 2].Value.ToString();
                    }
                    else
                    {
                        textBox_DELAYCAMMISS.Text = "50";
                    }

                    if (worksheet.Cells[15, 3].Value != null)
                    {
                        textBox_RESETDURATION.Text = worksheet.Cells[15, 3].Value.ToString();
                    }
                    else
                    {
                        textBox_RESETDURATION.Text = "2";
                    }

                    int.TryParse(textBox_DELAYCAMMISS.Text, out m_DELAYCAMMISS);
                    float.TryParse(textBox_RESETDURATION.Text, out m_RESETDURATION);
                }
            }
            finally
            {
                IPSSTApp.Instance().m_mainform.add_Log("PLC Setting Loaded.");
            }
        }

        public void button_SAVE_Click(object sender, EventArgs e)
        {
            //IPSSTApp.Instance().m_Config.m_Model_Name = IPSSTApp.Instance().m_mainform.textBox_MODEL_NAME.Text;
            if (IPSSTApp.Instance().m_Config.m_Model_Name == "")
            {
                if (IPSSTApp.Instance().m_Config.m_SetLanguage == 0)
                {//한국어
                    IPSSTApp.Instance().m_mainform.add_Log("모델을 등록후 사용하세요.");
                }
                else if (IPSSTApp.Instance().m_Config.m_SetLanguage == 1)
                {//영어
                    IPSSTApp.Instance().m_mainform.add_Log("Use after registering a model.");
                }
                return;
            }

            try
            {
                FileInfo newFile = new FileInfo(IPSSTApp.Instance().excute_path + "\\Models\\" + IPSSTApp.Instance().m_Config.m_Model_Name + "\\" + IPSSTApp.Instance().m_Config.m_Model_Name + ".xlsx");
                using (ExcelPackage package = new ExcelPackage(newFile))
                {
                    // Add a worksheet to the empty workbook
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[3];

                    worksheet.Cells[2, 2].Value = cbPortName.Items[cbPortName.SelectedIndex].ToString();
                    worksheet.Cells[3, 2].Value = cbBaudrate.Items[cbBaudrate.SelectedIndex].ToString();
                    worksheet.Cells[4, 2].Value = cbDataBits.Items[cbDataBits.SelectedIndex].ToString();
                    worksheet.Cells[5, 2].Value = cbStopBits.Items[cbStopBits.SelectedIndex].ToString();
                    worksheet.Cells[6, 2].Value = cbParity.Items[cbParity.SelectedIndex].ToString();
                    worksheet.Cells[7, 2].Value = cbReceiveFormat.Items[cbReceiveFormat.SelectedIndex].ToString();
                    worksheet.Cells[8, 2].Value = cbSendFormat.Items[cbSendFormat.SelectedIndex].ToString();
                    worksheet.Cells[9, 2].Value = comboBox_SlaveID.Items[comboBox_SlaveID.SelectedIndex].ToString();
                    worksheet.Cells[10, 2].Value = comboBox_Protocal.Items[comboBox_Protocal.SelectedIndex].ToString();
                    worksheet.Cells[10, 3].Value = textBox_TxInterval.Text;
                    worksheet.Cells[10, 4].Value = checkBox_PINGPONG.Checked == false ? 0 : 1;
                    worksheet.Cells[10, 5].Value = checkBox_AllOnceTx.Checked == false ? 0 : 1;
                    worksheet.Cells[10, 6].Value = textBox_CheckDelay.Text;
                    worksheet.Cells[10, 7].Value = comboBox_NOOBJECT.SelectedIndex;
                    worksheet.Cells[11, 2].Value = IPSSTApp.Instance().m_Config.m_SetLanguage;
                    worksheet.Cells[13, 2].Value = textBox_SERVER_IP.Text;
                    worksheet.Cells[13, 3].Value = textBox_SERVER_PORT.Text;
                    worksheet.Cells[13, 4].Value = checkBox_SIMULATION.Checked == false ? 0 : 1;

                    worksheet.Cells[14, 2].Value = textBox_Delay0.Text;
                    worksheet.Cells[14, 3].Value = textBox_Delay1.Text;
                    worksheet.Cells[14, 4].Value = textBox_Delay2.Text;
                    worksheet.Cells[14, 5].Value = textBox_Delay3.Text;
                    worksheet.Cells[14, 6].Value = textBox_CAMREFCNT.Text;

                    worksheet.Cells[14, 7].Value = textBox_ROOMNUM.Text;
                    worksheet.Cells[14, 8].Value = checkBox_MERGETX.Checked == false ? 0 : 1;
                    worksheet.Cells[14, 9].Value = checkBox_Tab_Enable.Checked == false ? 0 : 1;

                    worksheet.Cells[15, 2].Value = textBox_DELAYCAMMISS.Text;
                    worksheet.Cells[15, 3].Value = textBox_RESETDURATION.Text;

                    int.TryParse(textBox_DELAYCAMMISS.Text, out m_DELAYCAMMISS);
                    float.TryParse(textBox_RESETDURATION.Text, out m_RESETDURATION);

                    int.TryParse(textBox_ROOMNUM.Text, out IPSSTApp.Instance().m_Config.Tx_Room_Num);
                    IPSSTApp.Instance().m_Config.Tx_Merge = checkBox_MERGETX.Checked;

                    int.TryParse(textBox_TxInterval.Text, out t_Tx_Interval);
                    int.TryParse(textBox_CheckDelay.Text, out t_Once_Delay);
                    IPSSTApp.Instance().m_Config.m_Judge_Priority = comboBox_NOOBJECT.SelectedIndex;

                    int t_v = 10;
                    int.TryParse(textBox_CAMREFCNT.Text, out t_v);
                    if (t_v >= 0)
                    {
                        IPSSTApp.Instance().m_Config.CAM_Refresh_CNT = t_v;
                    }
                    else
                    {
                        IPSSTApp.Instance().m_Config.CAM_Refresh_CNT = 10;
                    }

                    package.Save();
                }
                button_Send_Save_Click(sender, e);
            }
            finally
            {
                IPSSTApp.Instance().m_mainform.add_Log("PLC Setting Saved.");
            }
        }

        private void txt2_Enter(object sender, EventArgs e)
        {
            btnSend_Click(sender, e);
        }

        private void txt2_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnSend_Click(sender, e);
            }
        }

        public void SerialTx(int OkNg)
        {
            //label9.Text = cam.ToString() + OkNg.ToString();

            if (!serialPort1.IsOpen)
            {
                //send_Message.Clear();
                return;
            }

            if (!m_check_sending)
            {
                if (OkNg >= 51 && OkNg <= 59)
                {
                    //Thread.Sleep(50);
                    m_check_sending = true;
                    serialPort1.Write(sENQ() + "00" + OkNg.ToString("00") + sETX());
                    m_check_sending = false;
                    //IPSSTApp.Instance().m_mainform.add_Log("캠1판정 : " + sENQ() + "00" + OkNg.ToString("00") + sETX());
                }
                else if (OkNg >= 41 && OkNg <= 49)
                {
                    m_check_sending = true;
                    serialPort1.Write(sSTX() + "00" + OkNg.ToString("00") + sETX());
                    m_check_sending = false;
                    //IPSSTApp.Instance().m_mainform.add_Log("캠0판정 : " + sSTX() + "00" + OkNg.ToString("00") + sETX());
                }
                Thread.Sleep(5);
                if (!m_check_sending)
                {
                    if (m_Cam_Trigger_Num < 3)
                    {
                        m_Cam_Trigger_Num = 3;
                        m_Trigger_Check = true;
                        serialPort1.Write(sSTX() + "0094" + sETX());
                    }
                    else if (m_Cam_Trigger_Num == 3)
                    {
                        m_Cam_Trigger_Num = 4;
                        m_Trigger_Check = true;
                        serialPort1.Write(sSTX() + "0095" + sETX());
                    }
                    else if (m_Cam_Trigger_Num == 4)
                    {
                        m_Cam_Trigger_Num = 5;
                        m_Trigger_Check = true;
                        serialPort1.Write(sSTX() + "0096" + sETX());
                    }
                    else if (m_Cam_Trigger_Num == 5)
                    {
                        m_Cam_Trigger_Num = 3;
                        m_Trigger_Check = true;
                        serialPort1.Write(sSTX() + "0094" + sETX());
                    }
                }
            }
            else
            {
                Thread.Sleep(5);
                for (int i = 0; i < 10; i++)
                {
                    Thread.Sleep(1);
                    if (!m_check_sending)
                    {
                        if (OkNg >= 51 && OkNg <= 59)
                        {
                            //Thread.Sleep(50);
                            m_check_sending = true;
                            serialPort1.Write(sENQ() + "00" + OkNg.ToString("00") + sETX());
                            m_check_sending = false;
                            break;
                            //IPSSTApp.Instance().m_mainform.add_Log("캠1판정 : " + sENQ() + "00" + OkNg.ToString("00") + sETX());
                        }
                        else if (OkNg >= 41 && OkNg <= 49)
                        {
                            m_check_sending = true;
                            serialPort1.Write(sSTX() + "00" + OkNg.ToString("00") + sETX());
                            m_check_sending = false;
                            break;
                            //IPSSTApp.Instance().m_mainform.add_Log("캠0판정 : " + sSTX() + "00" + OkNg.ToString("00") + sETX());
                        }
                    }
                }
            }
        }

        private void dataGridView1_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (!serialPort1.IsOpen)
            {
                return;
            }
            int ii, jj;
            ii = e.RowIndex;
            jj = e.ColumnIndex;
            //txt2.Text = "+" + e.RowIndex.ToString() + e.ColumnIndex.ToString();
            txt2.Text = "S" + e.RowIndex.ToString() + "1P";
            serialPort1.Write(txt2.Text);
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        public void PLC_Thread_Start()
        {
            m_threads_Check = true;
            //timer_Judge.Start();
            //return;
            send_Message[0].Clear();
            send_Message[1].Clear();
            send_Message[2].Clear();
            send_Message[3].Clear();
            // send_Message[2].Clear();
            threads[0] = new Thread(ThreadProc0); threads[0].IsBackground = true;
            //threads[0].Priority = ThreadPriority.Normal;
            threads[0].Start();
        }

        public void PLC_Thread_Stop()
        {
            m_threads_Check = false;
            //timer_Judge.Stop();
            //return;
            //threads[0].Abort();
            if (threads[0] != null && threads[0].IsAlive)
            {
                threads[0].Join();
                threads[0] = null;
            }
        }

        /// PLC로 부터 수신된 데이타를 가지고 온다. ///
        string strRemainData = string.Empty;
        private string DataRead()
        {
            bool m_Next = false;
            string strInData = string.Empty;
            string strRetValue = string.Empty;
            int t_end_idx = -1;
            int t_start_idx = -1;

            DateTime start = DateTime.Now;
            //strInData += strRemainData;
            do
            {
                strRemainData = strInData;
                string msg = serialPort1.ReadExisting();
                strInData += msg;

                if (strRemainData.Length == strInData.Length)
                {
                    if (strInData.Length > 12)
                    {
                        t_end_idx = strInData.LastIndexOf(sETX());
                        t_start_idx = strInData.LastIndexOf(sACK());
                        if (t_end_idx > 0 && t_start_idx >= 0 && t_start_idx < t_end_idx)
                        {
                            strInData = strInData.Substring(t_start_idx, t_end_idx - t_start_idx + 1);
                            //txt_Data.Text += strInData;//Test용

                            if (strInData.Length == 13)
                            {
                                strRetValue = strInData.Substring(10, 2); //실제Data
                                m_Next = true;
                            }
                            else if (strInData.Length == 15)
                            {
                                strRetValue = strInData.Substring(10, 4); //실제Data
                                m_Next = true;
                            }
                            else if (strInData.Length > 15)//00RSS01010000
                            {
                                strRetValue = strInData.Substring(14, 4) + strInData.Substring(10, 4); //실제Data
                                m_Next = true;
                            }
                        }
                    }
                }

                ////TODO : 데이타에 종료문자가 있으면...
                //if (strInData.IndexOf(sETX()) > 0 && strInData.IndexOf(sACK()) == 0)
                //{
                //    //strInData = strInData.Substring(strInData.IndexOf(sACK()), strInData.Length - strInData.IndexOf(sACK()));
                //    //TODO 데이타 처음에 정상 응답이 있으면
                //    //if (strInData[0] == sACK())
                //    //{
                //    //TODO 들어오는 데이타를 분석..[ETX(1)+국번(2)+비트읽기(3)+블륵수(2)]
                //    //txt_Data.Text += strInData ;//Test용

                //    if (strInData.Length == 13)
                //    {
                //        strRetValue = strInData.Substring(10, 2); //실제Data
                //    }
                //    else if (strInData.Length == 15)
                //    {
                //        strRetValue = strInData.Substring(10, 4); //실제Data
                //    }
                //    else if (strInData.Length > 15)//00RSS01010000
                //    {
                //        strRetValue = strInData.Substring(14, 4) + strInData.Substring(10, 4); //실제Data
                //    }
                //    else
                //    {
                //        strRetValue = "1";
                //    }
                //    m_Next = true;
                //    //}
                //    //else
                //    //{
                //    //    string t_str = strRetValue.
                //    //}
                //}

                //    //TODO: 데이타에 비정상 응답이 들어오면..

                //else if (strInData.IndexOf(sETX()) > 0 && strInData.IndexOf(sNAK()) == 0)
                //{
                //    //txt1.Text = "NAK";
                //    strRetValue = "-1";
                //    m_Next = true;
                //}
                //else
                //{
                //    strRemainData += strRetValue;
                //}
                //}

                //DOTO : 응답이 없으면 0.5초간은 로프를둘면서 기다란다.

                TimeSpan ts = DateTime.Now.Subtract(start);

                if (ts.Milliseconds > 100)
                {
                    //txt1.Text = "TimeOut";
                    strRetValue = "-3";
                    m_Next = true;
                }
                Thread.Sleep(1);
            } while (!m_Next);

            return strRetValue;
        }

        private void Response_read()
        {
            bool m_Next = false;
            string strInData = string.Empty;
            int t_old_length = 0; int t_new_length = 0;
            DateTime start = DateTime.Now;
            do
            {
                t_old_length = strInData.Length;
                string msg = serialPort1.ReadExisting();
                strInData += msg;
                t_new_length = strInData.Length;

                if (t_old_length == t_new_length && t_old_length > 0)
                {
                    m_Next = true;
                }

                TimeSpan ts = DateTime.Now.Subtract(start);

                if (ts.Milliseconds > 50)
                {
                    m_Next = true;
                }
            } while (!m_Next);
        }

        private bool t_PLC_D_READ_check = false;
        /// PLC에 m_device를 읽어 오라고 명령한다. ///
        public double PLC_D_READ(string m_device, int m_size)
        {
            try
            {
                if (m_Protocal == (int)PROTOCAL.XGT)
                {
                    if (!serialPort1.IsOpen)
                    {
                        return -1;
                    }
                    t_PLC_D_READ_check = true;
                    while (serialPort1.WriteBufferSize == 0)
                    {
                        //Thread.Sleep(1);
                        //데이타를 전부 PLC로 전송 하기 위함..
                    }
                    //DateTime t1 = DateTime.Now;
                    string strOutputData = sENQ() + m_SlaveID + "RSB" + (m_device.Length + 1).ToString("00") + "%" + m_device + m_size.ToString("00") + sEOT(); ;
                    serialPort1.Write(strOutputData);

                    do
                    {
                        //Thread.Sleep(1);
                        //데이타를 전부 PLC로 전송 하기 위함..
                    } while (serialPort1.WriteBufferSize == 0);

                    string indata = DataRead();
                    t_PLC_D_READ_check = false;
                    //txt_Data.Text += textBox_D_DEVICE.Text + " : " + indata + " 읽기완료 \r\n";
                    if (indata == null || indata == "")
                    {
                        return -3;
                    }
                    return Convert.ToDouble(indata);
                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                {
                    t_PLC_D_READ_check = true;
                    double t_out = -3;
                    if (m_size == 1)
                    {
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        int[] serverResponse = modbusClient.ReadHoldingRegisters(nTmp, m_size);
                        t_out = (double)serverResponse[0];
                    }
                    else if (m_size == 2)
                    {
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        int[] serverResponse = modbusClient.ReadHoldingRegisters(nTmp, m_size);
                        t_out = double.Parse(serverResponse[1].ToString("0000") + serverResponse[0].ToString("0000"));
                    }
                    t_PLC_D_READ_check = false;

                    return t_out;
                }
                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    t_PLC_D_READ_check = true;
                    double t_out = -3;
                    if (m_size == 1)
                    {
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        int[] serverResponse = modbusClient.ReadHoldingRegisters(nTmp, m_size);
                        t_out = (double)serverResponse[0];
                    }
                    else if (m_size == 2)
                    {
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        int[] serverResponse = modbusClient.ReadHoldingRegisters(nTmp, m_size);
                        t_out = double.Parse(serverResponse[1].ToString("0000") + serverResponse[0].ToString("0000"));
                    }
                    t_PLC_D_READ_check = false;

                    return t_out;
                }
            }
            catch
            { }
            return -1;
            //TimeSpan span = DateTime.Now.Subtract(t1);
            //txt1.Text = span.Milliseconds.ToString();
        }
        private bool t_PLC_L_READ_check = false;
        /// PLC에 m_device를 읽어 오라고 명령한다. ///
        public double PLC_L_READ(string m_device)
        {
            try
            {
                if (m_Protocal == (int)PROTOCAL.XGT)
                {
                    if (!serialPort1.IsOpen)
                    {
                        return -1;
                    }
                    while (serialPort1.WriteBufferSize == 0)
                    {
                        Thread.Sleep(1);
                        //데이타를 전부 PLC로 전송 하기 위함..
                    }

                    if (m_D_Write_check)
                    {
                        return -1;
                    }

                    t_PLC_L_READ_check = true;
                    //DateTime t1 = DateTime.Now;
                    string strOutputData = sENQ() + m_SlaveID + "RSS" + "01" + (m_device.Length + 1).ToString("00") + "%" + m_device + sEOT();
                    serialPort1.Write(strOutputData);

                    do
                    {
                        //데이타를 전부 PLC로 전송 하기 위함..
                    } while (serialPort1.WriteBufferSize == 0);

                    string indata = DataRead();
                    t_PLC_L_READ_check = false;
                    //txt_Data.Text += textBox_D_DEVICE.Text + " : " + indata + " 읽기완료 \r\n";
                    if (indata == null || indata == "")
                    {
                        return -3;
                    }
                    return Convert.ToDouble(indata);
                    //TimeSpan span = DateTime.Now.Subtract(t1);
                    //txt1.Text = span.Milliseconds.ToString();
                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                {
                    if (!modbusClient.Connected)
                    {
                        return -1;
                    }
                    t_PLC_L_READ_check = true;
                    string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);

                    bool[] serverResponse = modbusClient.ReadCoils(nTmp, 1);
                    t_PLC_L_READ_check = false;
                    if (serverResponse.Length == 0)
                    {
                        return -1;
                    }
                    return Convert.ToDouble(serverResponse[0] == false ? 0d : 1d);
                }
                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    if (!modbusClient.Connected)
                    {
                        return -1;
                    }
                    t_PLC_L_READ_check = true;
                    string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);

                    bool[] serverResponse = modbusClient.ReadCoils(nTmp, 1);
                    t_PLC_L_READ_check = false;
                    if (serverResponse.Length == 0)
                    {
                        return -1;
                    }
                    return Convert.ToDouble(serverResponse[0] == false ? 0d : 1d);
                }
            }
            catch
            { }
            return 0;
        }

        /// PLC에 m_device를 읽어 오라고 명령한다. ///
        public double PLC_D_WRITE(string m_device, int m_size, double m_data)
        {
            try
            {
                if (m_Protocal == (int)PROTOCAL.XGT)
                {
                    if (!serialPort1.IsOpen)
                    {
                        return -1;
                    }
                    m_D_Write_check = true;
                    while (serialPort1.WriteBufferSize == 0)
                    {
                        Thread.Sleep(1);
                        //데이타를 전부 PLC로 전송 하기 위함..
                    }

                    //DateTime t1 = DateTime.Now;
                    if (m_size == 1)
                    {
                        //Thread.Sleep(1);
                        string strOutputData = sENQ() + m_SlaveID + "WSS" + m_size.ToString("00") + (m_device.Length + 1).ToString("00") + "%" + m_device + m_data.ToString("0000") + sEOT();
                        serialPort1.Write(strOutputData);
                        //Thread.Sleep(1);
                    }
                    else if (m_size == 2)
                    {
                        string strOutputData = sENQ() + m_SlaveID + "WSB" + (m_device.Length + 1).ToString("00") + "%" + m_device + m_size.ToString("00") + m_data.ToString("00000000").Substring(4, 4) + m_data.ToString("00000000").Substring(0, 4) + sEOT();
                        serialPort1.Write(strOutputData);
                    }

                    m_D_Write_check = false;
                    do
                    {
                        //데이타를 전부 PLC로 전송 하기 위함..
                    } while (serialPort1.WriteBufferSize == 0);
                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                {
                    m_D_Write_check = true;
                    if (m_size == 1)
                    {
                        int registerToSend = int.Parse(m_data.ToString("0000"));
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        modbusClient.WriteSingleRegister(nTmp, registerToSend);
                    }
                    else if (m_size == 2)
                    {
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        int[] registersToSend = new int[m_size];
                        for (int i = 0; i < m_size; i++)
                        {
                            registersToSend[i] = int.Parse(m_data.ToString("00000000").Substring((1 - i) * 4, 4));
                        }
                        modbusClient.WriteMultipleRegisters(nTmp, registersToSend);
                    }
                    m_D_Write_check = false;
                }
                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    m_D_Write_check = true;
                    if (m_size == 1)
                    {
                        int registerToSend = int.Parse(m_data.ToString("0000"));
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        modbusClient.WriteSingleRegister(nTmp, registerToSend);
                    }
                    else if (m_size == 2)
                    {
                        string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);
                        int[] registersToSend = new int[m_size];
                        for (int i = 0; i < m_size; i++)
                        {
                            registersToSend[i] = int.Parse(m_data.ToString("00000000").Substring((1 - i) * 4, 4));
                        }
                        modbusClient.WriteMultipleRegisters(nTmp, registersToSend);
                    }
                    m_D_Write_check = false;
                }
                //Response_read();
            }
            catch
            {
                m_D_Write_check = false;
            }

            return 1;

            //string indata = DataRead();
            //m_D_Write_check = false;
            //return Convert.ToDouble(indata);
        }

        /// PLC에 m_device를 읽어 오라고 명령한다. ///
        public double PLC_D_BLOCK_WRITE(string[] m_device, int m_size, double[] m_data)
        {
            try
            {
                if (m_Protocal == (int)PROTOCAL.XGT)
                {
                    if (!serialPort1.IsOpen)
                    {
                        return -1;
                    }

                    m_D_Write_check = true;
                    //while (serialPort1.WriteBufferSize == 0)
                    //{
                    //    Thread.Sleep(10);
                    //    //데이타를 전부 PLC로 전송 하기 위함..
                    //}

                    //DateTime t1 = DateTime.Now;
                    if (m_size == 1)
                    {
                        //Thread.Sleep(1);
                        string strOutputData = sENQ() + m_SlaveID + "WSS" + m_size.ToString("00") + (m_device[0].Length + 1).ToString("00") + "%" + m_device[0] + m_data[0].ToString("0000") + sEOT();
                        //IPSSTApp.Instance().m_mainform.add_Log(strOutputData);
                        serialPort1.Write(strOutputData);
                        //Thread.Sleep(1);
                    }
                    else if (m_size == 2)
                    {
                        string strOutputData = sENQ() + m_SlaveID + "WSS" + m_size.ToString("00") + (m_device[0].Length + 1).ToString("00") + "%" + m_device[0] + m_data[0].ToString("0000") + (m_device[1].Length + 1).ToString("00") + "%" + m_device[1] + m_data[1].ToString("0000") + sEOT();
                        //IPSSTApp.Instance().m_mainform.add_Log(strOutputData);
                        serialPort1.Write(strOutputData);
                    }
                    else if (m_size == 3)
                    {
                        string strOutputData = sENQ() + m_SlaveID + "WSS" + m_size.ToString("00") + (m_device[0].Length + 1).ToString("00") + "%" + m_device[0] + m_data[0].ToString("0000") + (m_device[1].Length + 1).ToString("00") + "%" + m_device[1] + m_data[1].ToString("0000") + (m_device[2].Length + 1).ToString("00") + "%" + m_device[2] + m_data[2].ToString("0000") + sEOT();
                        //IPSSTApp.Instance().m_mainform.add_Log(strOutputData);
                        serialPort1.Write(strOutputData);
                    }
                    else if (m_size == 4)
                    {
                        string strOutputData = sENQ() + m_SlaveID + "WSS" + m_size.ToString("00") + (m_device[0].Length + 1).ToString("00") + "%" + m_device[0] + m_data[0].ToString("0000") + (m_device[1].Length + 1).ToString("00") + "%" + m_device[1] + m_data[1].ToString("0000") + (m_device[2].Length + 1).ToString("00") + "%" + m_device[2] + m_data[2].ToString("0000") + (m_device[3].Length + 1).ToString("00") + "%" + m_device[3] + m_data[3].ToString("0000") + sEOT();
                        //IPSSTApp.Instance().m_mainform.add_Log(strOutputData);
                        serialPort1.Write(strOutputData);
                    }

                    m_D_Write_check = false;
                    do
                    {
                        //데이타를 전부 PLC로 전송 하기 위함..
                    } while (serialPort1.WriteBufferSize == 0);
                    //Response_read();

                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                {
                    if (!modbusClient.Connected)
                    {
                        return -1;
                    }

                    m_D_Write_check = true;

                    for (int i = 0; i < m_size; i++)
                    {
                        int registerToSend = int.Parse(m_data[i].ToString("0000"));
                        string strTmp = Regex.Replace(m_device[i], @"\D", ""); int nTmp = int.Parse(strTmp);
                        if (this.InvokeRequired)
                        {
                            this.Invoke((MethodInvoker)delegate
                            {
                                modbusClient.WriteSingleRegister(nTmp, registerToSend);
                            });
                        }
                        else
                        {
                            modbusClient.WriteSingleRegister(nTmp, registerToSend);
                        }
                        Thread.Sleep(t_Tx_Interval);
                    }

                    m_D_Write_check = false;

                }
                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    if (!modbusClient.Connected)
                    {
                        return -1;
                    }
                    m_D_Write_check = true;

                    for (int i = 0; i < m_size; i++)
                    {
                        int registerToSend = int.Parse(m_data[i].ToString("0000"));
                        string strTmp = Regex.Replace(m_device[i], @"\D", ""); int nTmp = int.Parse(strTmp);
                        if (this.InvokeRequired)
                        {
                            this.Invoke((MethodInvoker)delegate
                            {
                                modbusClient.WriteSingleRegister(nTmp, registerToSend);
                            });
                        }
                        else
                        {
                            modbusClient.WriteSingleRegister(nTmp, registerToSend);
                        }
                        Thread.Sleep(t_Tx_Interval);
                    }

                    //int[] registersToSend = new int[m_size];

                    //for (int i = 0; i < m_size; i++)
                    //{

                    //    registersToSend[i] = (int)(m_data[i]);
                    //}

                    //string strTmp = Regex.Replace(m_device[0], @"\D", ""); int nTmp = int.Parse(strTmp);
                    //modbusClient.WriteMultipleRegisters(nTmp, registersToSend);
                    m_D_Write_check = false;
                }
            }
            catch
            {
                m_D_Write_check = false;
            }
            //DataRead();
            //serialPort1.ReadExisting();
            return 1;

            //string indata = DataRead();
            //m_D_Write_check = false;
            //return Convert.ToDouble(indata);
        }

        /// PLC에 m_device를 읽어 오라고 명령한다. ///
        public double PLC_L_WRITE(string m_device, double m_data)
        {
            try
            {
                if (m_Protocal == (int)PROTOCAL.XGT)
                {
                    if (!serialPort1.IsOpen)
                    {
                        return -1;
                    }
                    while (serialPort1.WriteBufferSize == 0)
                    {
                        Thread.Sleep(1);
                        //데이타를 전부 PLC로 전송 하기 위함..
                    }
                    lock (this)
                    {
                        //DateTime t1 = DateTime.Now;
                        string strOutputData = sENQ() + m_SlaveID + "WSS" + "01" + (m_device.Length + 1).ToString("00") + "%" + m_device + m_data.ToString("00") + sEOT();
                        serialPort1.Write(strOutputData);

                        do
                        {
                            //데이타를 전부 PLC로 전송 하기 위함..
                        } while (serialPort1.WriteBufferSize == 0);

                        //string indata = DataRead();
                        //txt_Data.Text += textBox_D_DEVICE.Text + " : " + indata + " 읽기완료 \r\n";
                        //if (indata == null || indata == "")
                        //{
                        //    return -3d;
                        //}
                        Response_read();
                        return 1d;//Convert.ToDouble(indata);
                    }
                    //TimeSpan span = DateTime.Now.Subtract(t1);
                    //txt1.Text = span.Milliseconds.ToString();
                }
                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                {
                    if (!modbusClient.Connected)
                    {
                        return -1;
                    }

                    bool coilsToSend = false;

                    coilsToSend = m_data == 0d ? false : true;
                    string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);

                    modbusClient.WriteSingleCoil(nTmp, coilsToSend);

                }
                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                {
                    if (!modbusClient.Connected)
                    {
                        return -1;
                    }

                    bool coilsToSend = false;

                    coilsToSend = m_data == 0d ? false : true;
                    string strTmp = Regex.Replace(m_device, @"\D", ""); int nTmp = int.Parse(strTmp);

                    modbusClient.WriteSingleCoil(nTmp, coilsToSend);
                }
            }
            catch
            { }
            return 1d;
        }


        private void button_D_READ_Click(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                if (!serialPort1.IsOpen)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            txt_Data.ResetText();
            double m_data = PLC_D_READ(textBox_D_DEVICE.Text, Convert.ToInt32(textBox_D_SIZE.Text));
            txt_Data.Text += textBox_D_DEVICE.Text + " : " + m_data.ToString() + " Recieved \r\n";
        }

        private void button_D_WRITE_Click(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                if (!serialPort1.IsOpen)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            txt_Data.ResetText();
            double m_data = PLC_D_WRITE(textBox_D_DEVICE.Text, Convert.ToInt32(textBox_D_SIZE.Text), Convert.ToDouble(textBox_D_DATA.Text));
            if (m_data == 1)
            {
                txt_Data.Text += textBox_D_DEVICE.Text + " : Send \r\n";
            }
            else
            {
                txt_Data.Text += textBox_D_DEVICE.Text + " : Send fail \r\n";
            }
        }

        private void button_L_READ_Click(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                if (!serialPort1.IsOpen)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            txt_Data.ResetText();
            double m_data = PLC_L_READ(textBox_L_DEVICE.Text);
            txt_Data.Text += textBox_L_DEVICE.Text + " : " + m_data.ToString() + " Recieved \r\n";
        }

        private void button_L_WRITE_Click(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                if (!serialPort1.IsOpen)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                if (!modbusClient.Connected)
                {
                    return;
                }
            }
            txt_Data.ResetText();
            double m_data = PLC_L_WRITE(textBox_L_DEVICE.Text, Convert.ToDouble(textBox_L_DATA.Text));
            if (m_data == 1)
            {
                txt_Data.Text += textBox_L_DEVICE.Text + " : Send \r\n";
            }
            else
            {
                txt_Data.Text += textBox_L_DEVICE.Text + " : Send fail \r\n";
            }
        }

        private void comboBox_SlaveID_SelectedIndexChanged(object sender, EventArgs e)
        {
            m_SlaveID = comboBox_SlaveID.Items[comboBox_SlaveID.SelectedIndex].ToString();
            int.TryParse(m_SlaveID, out m_Pingpong_Num); m_Pingpong_Num %= 2;
            int.TryParse(m_SlaveID, out IPSSTApp.Instance().m_Config.PLC_Station_Num);
            if (m_Protocal == (int)PROTOCAL.ModbusRTU)
            {
                modbusClient.UnitIdentifier = byte.Parse(IPSSTApp.Instance().m_Config.PLC_Station_Num.ToString());
            }
        }

        private void comboBox_Protocal_SelectedIndexChanged(object sender, EventArgs e)
        {
            m_Protocal = comboBox_Protocal.SelectedIndex;
            if (m_Protocal < 0)
            {
                return;
            }
            if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
            {
                label37.Visible = true;
                label38.Visible = true;
                textBox_SERVER_IP.Visible = true;
                textBox_SERVER_PORT.Visible = true;

                label2.Visible = false; cbReceiveFormat.Visible = false;
                label3.Visible = false; cbSendFormat.Visible = false;
                label4.Visible = false; cbPortName.Visible = false;
                label5.Visible = false; cbBaudrate.Visible = false;
                label6.Visible = false; cbDataBits.Visible = false;
                label7.Visible = false; cbStopBits.Visible = false;
                label8.Visible = false; cbParity.Visible = false;
            }
            else
            {
                label37.Visible = false;
                label38.Visible = false;
                textBox_SERVER_IP.Visible = false;
                textBox_SERVER_PORT.Visible = false;

                label2.Visible = true; cbReceiveFormat.Visible = true;
                label3.Visible = true; cbSendFormat.Visible = true;
                label4.Visible = true; cbPortName.Visible = true;
                label5.Visible = true; cbBaudrate.Visible = true;
                label6.Visible = true; cbDataBits.Visible = true;
                label7.Visible = true; cbStopBits.Visible = true;
                label8.Visible = true; cbParity.Visible = true;
            }
        }

        private void button_View_Click(object sender, EventArgs e)
        {
            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
            {
                if (!serialPort1.IsOpen)
                {
                    return;
                }
                if (button_View.Text == "View")
                {
                    button_View.Text = "Stop";
                    serialPort1.DataReceived += new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                }
                else
                {
                    button_View.Text = "View";
                    serialPort1.DataReceived -= new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                }
            }
        }

        public int t_Tx_Interval = 15;
        private void textBox_TxInterval_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                int.TryParse(textBox_TxInterval.Text, out t_Tx_Interval);
            }
        }

        private void checkBox_PINGPONG_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox_PINGPONG.Checked)
            {
                checkBox_AllOnceTx.Checked = false;
                IPSSTApp.Instance().m_Config.PLC_Once_Tx_USE = checkBox_AllOnceTx.Checked;
            }
            IPSSTApp.Instance().m_Config.PLC_Pingpong_USE = checkBox_PINGPONG.Checked;
        }

        private void checkBox_AllOnceTx_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox_AllOnceTx.Checked)
            {
                checkBox_PINGPONG.Checked = false;
                IPSSTApp.Instance().m_Config.PLC_Pingpong_USE = checkBox_PINGPONG.Checked;
            }
            IPSSTApp.Instance().m_Config.PLC_Once_Tx_USE = checkBox_AllOnceTx.Checked;
            if (IPSSTApp.Instance().m_Config.PLC_Once_Tx_USE)
            {
                IPSSTApp.Instance().m_mainform.ctrCam1.m_Camera_Interval = 1;
                IPSSTApp.Instance().m_mainform.ctrCam2.m_Camera_Interval = 1;
                IPSSTApp.Instance().m_mainform.ctrCam3.m_Camera_Interval = 1;
                IPSSTApp.Instance().m_mainform.ctrCam4.m_Camera_Interval = 1;
            }
            else
            {
                IPSSTApp.Instance().m_mainform.ctrCam1.m_Camera_Interval = 30;
                IPSSTApp.Instance().m_mainform.ctrCam2.m_Camera_Interval = 30;
                IPSSTApp.Instance().m_mainform.ctrCam3.m_Camera_Interval = 30;
                IPSSTApp.Instance().m_mainform.ctrCam4.m_Camera_Interval = 30;
            }
        }

        private int t_Once_Delay = 100;
        private void ThreadProc0()
        {
            int t_time_cnt = 0;
            int t_cnt = 0;
            int t_send_num = 0;
            int t_send_num_M = 0;
            int i = 0; int j = 0;
            const int cam_num = 4;
            string[] t_send_Device_M = new string[cam_num];
            double[] t_send_Data_M = new double[cam_num];

            string[] t_send_Device = new string[cam_num];
            double[] t_send_Data = new double[cam_num];
            Stopwatch[] t_SW = new Stopwatch[5];
            t_SW[0] = new Stopwatch(); t_SW[1] = new Stopwatch(); t_SW[2] = new Stopwatch(); t_SW[3] = new Stopwatch(); t_SW[4] = new Stopwatch();
            int[] t_mcnt = new int[4];
            t_mcnt[0] = t_mcnt[1] = t_mcnt[2] = t_mcnt[3] = 0;
            bool[] t_all_true = new bool[4];
            t_all_true[0] = t_all_true[1] = t_all_true[2] = t_all_true[3] = true;
            double t_Max_NG = 10; int t_Cam_CNT = -1; //int t_Message_CNT = 0;
            string log_str_M = ""; bool t_RESETDURATION_check = false;

            IPSSTApp.Instance().m_mainform.add_Log("PLC Thread Start.");
            try
            {
                while (m_threads_Check)
                {
                    if (!m_threads_Check)
                    {
                        IPSSTApp.Instance().m_mainform.add_Log("PLC Thread terminated!");
                        break;
                    }
                    if (!IPSSTApp.Instance().m_Config.PLC_Once_Tx_USE)
                    {// 검사하고 바로 보내기

                        if (IPSSTApp.Instance().m_Config.Tx_Merge)
                        {// 카메라 수만큼 메세지가 들어오면 합쳐서 보냄

                            if (t_SW[4].ElapsedMilliseconds > (int)(m_RESETDURATION * 1000) && t_RESETDURATION_check == false)
                            {
                                for (int k = 0; k < IPSSTApp.Instance().m_Config.m_Cam_Total_Num; k++)
                                {
                                    IPSSTApp.Instance().m_Config.Tx_Idx[k] = 0;
                                    send_Message[k].Clear();
                                }
                                IPSSTApp.Instance().m_mainform.add_Log("Reset Tx address!");
                                t_RESETDURATION_check = true;
                            }

                            if (t_Cam_CNT == -1)
                            {
                                t_Cam_CNT = 0;
                                for (j = 0; j < 4; j++)
                                {
                                    if (!IPSSTApp.Instance().m_Config.ctr_Camera_Setting_Force_USE[j])
                                    {
                                        t_Cam_CNT++;
                                    }
                                    t_send_Device_M[j] = "";
                                    t_send_Data_M[j] = 0;
                                    t_send_Device[j] = "";
                                    t_send_Data[j] = 0;
                                }
                            } // 초기화 완료


                            bool t_send_check = false;
                            t_send_num = 0;
                            for (j = 0; j < 4; j++)
                            {
                                t_send_Data[j] = -1;
                                t_cnt = send_Message[j].Count;
                                if (t_cnt > 0)
                                {
                                    string []cp_msg;
                                    lock (send_Message[j])
                                    {
                                        cp_msg = send_Message[j][0].Split('_');
                                        send_Message[j].RemoveAt(0);
                                    }

                                    if (cp_msg.Length == 2)
                                    {// 일반 메세지
                                        t_send_Device[j] = cp_msg[0];
                                        t_send_Data[j] = Convert.ToDouble(cp_msg[1]);
                                        t_send_num++;
                                        t_send_check = true;
                                    }
                                    else if (cp_msg.Length == 3)
                                    {//결과 메세지
                                        if (t_send_Device_M[j].Length == 0)
                                        {
                                            t_send_Device_M[j] = cp_msg[0];
                                            t_send_Data_M[j] = Convert.ToDouble(cp_msg[1]);
                                            t_send_num_M++;
                                            log_str_M += "C" + j.ToString() + "[" + t_send_Device_M[j] + "_" + t_send_Data_M[j].ToString() + "] ";
                                        }
                                    }
                                }
                            }

                            if (t_send_num_M == t_Cam_CNT)
                            {
                                PLC_D_BLOCK_WRITE(t_send_Device_M, t_send_num_M, t_send_Data_M);
                                if (IPSSTApp.Instance().m_Config.PLC_Judge_view)
                                {
                                    IPSSTApp.Instance().m_mainform.add_Log(log_str_M);
                                }
                                for (j = 0; j < 4; j++)
                                {
                                    t_send_Device_M[j] = "";
                                    t_send_Data_M[j] = 0;
                                }
                                log_str_M = "";
                                t_send_num_M = 0;
                                t_RESETDURATION_check = false;
                                t_SW[4].Reset(); t_SW[4].Start();
                                Thread.Sleep(t_Tx_Interval);
                            }
                            else if (t_send_check)
                            {
                                string[] tt_send_Device = new string[t_send_num];
                                double[] tt_send_Data = new double[t_send_num];
                                string log_str = "";
                                t_send_num = 0;
                                for (j = 0; j < cam_num; j++)
                                {
                                    if (t_send_Data[j] >= 0)
                                    {
                                        tt_send_Device[t_send_num] = t_send_Device[j];
                                        tt_send_Data[t_send_num] = t_send_Data[j];
                                        t_send_num++;
                                        log_str += "C" + j.ToString() + "[" + t_send_Device[j] + "_" + t_send_Data[j].ToString() + "] ";
                                    }
                                }
                                PLC_D_BLOCK_WRITE(tt_send_Device, t_send_num, tt_send_Data);
                                if (IPSSTApp.Instance().m_Config.PLC_Judge_view)
                                {
                                    IPSSTApp.Instance().m_mainform.add_Log(log_str);
                                }
                                Thread.Sleep(t_Tx_Interval);
                            }
                        }
                        else
                        {// 메세지가 들어오면 되는대로 보냄
                            t_send_num = 0;
                            //CAM0,1,2번 판정
                            for (i = 0; i < cam_num; i++)
                            {
                                t_send_Data[i] = -1;
                                t_cnt = send_Message[i].Count;
                                if (t_cnt > 3)
                                {
                                    t_Tx_Interval--;
                                    if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                                    {
                                        if (t_Tx_Interval < 10)
                                        {
                                            t_Tx_Interval = 10;
                                        }
                                    }
                                    else
                                    {
                                        if (t_Tx_Interval < 15)
                                        {
                                            t_Tx_Interval = 15;
                                        }
                                    }
                                    if (textBox_TxInterval.InvokeRequired)
                                    {
                                        textBox_TxInterval.Invoke((MethodInvoker)delegate
                                        {
                                            textBox_TxInterval.Text = t_Tx_Interval.ToString();
                                        });
                                    }
                                    else
                                    {
                                        textBox_TxInterval.Text = t_Tx_Interval.ToString();
                                    }
                                }
                                if (t_cnt > 0)
                                {
                                    //if (IPSSTApp.Instance().m_Config.PLC_Judge_view)
                                    //{
                                    //    IPSSTApp.Instance().m_mainform.add_Log("C:" + i.ToString() + "M:" + t_cnt);
                                    //}
                                    //string t_m = (string)send_Message[i].Dequeue();
                                    //if (t_m != null)
                                    //{
                                    //    string[] t_send_Message = t_m.Split('_');
                                    lock (send_Message[i])
                                    {
                                        if (send_Message[i][0] != null)
                                        {
                                            string[] t_send_Message = send_Message[i][0].Split('_');

                                            if (t_send_Message.Length >= 2)
                                            {
                                                t_send_Device[i] = t_send_Message[0];
                                                t_send_Data[i] = Convert.ToDouble(t_send_Message[1]);
                                                t_send_num++;
                                            }
                                            //if (i < 3)
                                            //{
                                            //    send_Message[i].Clear();
                                            //}
                                            //else
                                            //{
                                            send_Message[i].RemoveAt(0);
                                            //}
                                        }
                                        //else if (t_m == null)
                                        //{
                                        //    //send_Message[i].RemoveAt(0);
                                        //}
                                        else if (send_Message[i][0] == null)
                                        {
                                            send_Message[i].RemoveAt(0);
                                        }
                                    }
                                }
                                //if (send_Message[i].Count > 2)
                                //{
                                //    send_Message[i].Clear();
                                //}
                            }

                            if (t_send_num > 0)
                            {
                                string[] tt_send_Device = new string[t_send_num];
                                double[] tt_send_Data = new double[t_send_num];
                                string log_str = "";
                                t_send_num = 0;
                                for (j = 0; j < cam_num; j++)
                                {
                                    if (t_send_Data[j] >= 0)
                                    {
                                        tt_send_Device[t_send_num] = t_send_Device[j];
                                        tt_send_Data[t_send_num] = t_send_Data[j];
                                        t_send_num++;
                                        log_str += "C" + j.ToString() + "[" + t_send_Device[j] + "_" + t_send_Data[j].ToString() + "] ";
                                    }
                                    //else
                                    //{
                                    //    log_str += "C" + j.ToString() + "[No] ";
                                    //}
                                }
                                if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
                                {
                                    bool t_write_check = false;
                                    while (serialPort1.WriteBufferSize == 0)
                                    {
                                        Thread.Sleep(1);
                                        t_write_check = true;
                                        //데이타를 전부 PLC로 전송 하기 위함..
                                    }
                                    if (t_write_check)
                                    {
                                        Thread.Sleep(11);
                                    }
                                }
                                else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                                {

                                }
                                else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                                {

                                }

                                PLC_D_BLOCK_WRITE(tt_send_Device, t_send_num, tt_send_Data);
                                if (IPSSTApp.Instance().m_Config.PLC_Judge_view)
                                {
                                    IPSSTApp.Instance().m_mainform.add_Log(log_str);
                                }
                                Thread.Sleep(t_Tx_Interval);
                                t_time_cnt = 0;
                            }
                            else
                            {
                                t_time_cnt = t_Tx_Interval;
                            }
                        }
                    }
                    else
                    {// 검사하고 일정 delay후 값이 더이상 안들어오면 보내기
                        Thread.Sleep(t_Tx_Interval);

                        for (i = 0; i < cam_num; i++)
                        {
                            t_send_Data[i] = -1;
                            t_cnt = send_Message[i].Count;
                            if (t_cnt > t_mcnt[i])
                            {
                                t_mcnt[i] = t_cnt;
                                t_SW[i].Reset(); t_SW[i].Start();
                            }
                            else
                            {
                                if (t_SW[i].ElapsedMilliseconds >= t_Once_Delay && t_mcnt[i] > 0)
                                {
                                    t_SW[i].Stop();
                                    lock (send_Message[i])
                                    {
                                        t_mcnt[i] = send_Message[i].Count;
                                        for (j = 0; j < t_mcnt[i]; j++)
                                        {
                                            if (send_Message[i][j] != null)
                                            {
                                                string[] t_send_Message = send_Message[i][j].Split('_');
                                                if (t_send_Message.Length >= 2)
                                                {

                                                    //string t_m = (string)send_Message[i].Dequeue();
                                                    //if (t_m != null)
                                                    //{
                                                    //    string[] t_send_Message = t_m.Split('_');
                                                    //    if (t_send_Message.Length == 2)
                                                    //{
                                                    if (j == 0)
                                                    {
                                                        t_send_Device[i] = t_send_Message[0];
                                                    }
                                                    t_send_Data[i] = Convert.ToDouble(t_send_Message[1]);
                                                    if (t_send_Data[i] != 40)
                                                    {
                                                        if (t_Max_NG < t_send_Data[i])
                                                        {
                                                            t_Max_NG = t_send_Data[i];
                                                        }
                                                        t_all_true[i] = false;
                                                        //break;
                                                    }
                                                }
                                            }
                                        }
                                        send_Message[i].Clear();
                                    }

                                    if (t_all_true[i])
                                    {
                                        t_send_Data[i] = 40;
                                    }
                                    else
                                    {
                                        t_send_Data[i] = t_Max_NG;
                                    }
                                    t_send_num++;
                                    t_mcnt[i] = 0;
                                    t_all_true[i] = true;
                                    t_Max_NG = 10;
                                }
                            }
                        }

                        if (t_send_num > 0)
                        {
                            string[] tt_send_Device = new string[t_send_num];
                            double[] tt_send_Data = new double[t_send_num];
                            string log_str = "";
                            t_send_num = 0;
                            for (j = 0; j < cam_num; j++)
                            {
                                if (t_send_Data[j] >= 0)
                                {
                                    tt_send_Device[t_send_num] = t_send_Device[j];
                                    tt_send_Data[t_send_num] = t_send_Data[j];
                                    t_send_num++;
                                    log_str += "C" + j.ToString() + "[" + t_send_Device[j] + "_" + t_send_Data[j].ToString() + "] ";
                                }
                                //else
                                //{
                                //    log_str += "C" + j.ToString() + "[No] ";
                                //}
                            }
                            if (m_Protocal == (int)PROTOCAL.XGT || m_Protocal == (int)PROTOCAL.IPSBoard)
                            {
                                bool t_write_check = false;
                                while (serialPort1.WriteBufferSize == 0)
                                {
                                    Thread.Sleep(1);
                                    t_write_check = true;
                                    //데이타를 전부 PLC로 전송 하기 위함..
                                }
                                if (t_write_check)
                                {
                                    Thread.Sleep(11);
                                }
                            }
                            else if (m_Protocal == (int)PROTOCAL.ModbbusTCP)
                            {

                            }
                            else if (m_Protocal == (int)PROTOCAL.ModbusRTU)
                            {

                            }
                            PLC_D_BLOCK_WRITE(tt_send_Device, t_send_num, tt_send_Data);
                            if (IPSSTApp.Instance().m_Config.PLC_Judge_view)
                            {
                                IPSSTApp.Instance().m_mainform.add_Log(log_str);
                            }
                        }
                        t_send_num = 0;
                    }
                }
            }
            catch (System.Exception ex)
            {
                IPSSTApp.Instance().m_mainform.add_Log(ex.ToString());
                IPSSTApp.Instance().m_mainform.add_Log("PLC Thread terminated with error!");
                m_threads_Check = false;
                PLC_Thread_Start();
            }
        }

        private void label36_Click(object sender, EventArgs e)
        {

        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void checkBox_JView_CheckedChanged(object sender, EventArgs e)
        {
            IPSSTApp.Instance().m_Config.PLC_Judge_view = checkBox_JView.Checked;
        }

        private void checkBox_SIMULATION_CheckedChanged(object sender, EventArgs e)
        {
            IPSSTApp.Instance().m_mainform.Simulation_mode = checkBox_SIMULATION.Checked;
        }

        public void button_Send_Save_Click(object sender, EventArgs e)
        {
            int.TryParse(textBox_Delay0.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[0]);
            int.TryParse(textBox_Delay1.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[1]);
            int.TryParse(textBox_Delay2.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[2]);
            int.TryParse(textBox_Delay3.Text, out IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[3]);

            send_Message[0].Add("DW5090" + "_" + IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[0].ToString());
            send_Message[1].Add("DW5091" + "_" + IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[1].ToString());
            send_Message[2].Add("DW5092" + "_" + IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[2].ToString());
            send_Message[3].Add("DW5093" + "_" + IPSSTApp.Instance().m_Config.m_Cam_Trigger_Delay[3].ToString());
        }

        private void checkBox_MERGETX_CheckedChanged(object sender, EventArgs e)
        {
            IPSSTApp.Instance().m_Config.Tx_Merge = checkBox_MERGETX.Checked;
        }

        private void textBox_ROOMNUM_KeyUp(object sender, KeyEventArgs e)
        {
            int t_v = 0;
            int.TryParse(textBox_ROOMNUM.Text, out t_v);
            if (t_v <= 0)
            {
                textBox_ROOMNUM.Text = "1";
            }
            if (t_v >= 10)
            {
                textBox_ROOMNUM.Text = "9";
            }
        }

        private void checkBox_Tab_Enable_CheckedChanged(object sender, EventArgs e)
        {
            IPSSTApp.Instance().m_Config.Disable_Menu = checkBox_Tab_Enable.Checked;
        }
    }
}
